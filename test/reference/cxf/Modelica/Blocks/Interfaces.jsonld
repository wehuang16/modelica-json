{
  "@context": {
    "S231P": "https://data.ashrae.org/S231P#"
  },
  "@id": "http://example.org#Modelica.Blocks.Interfaces",
  "@type": "S231P:Block",
  "S231P:diagram": "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Text(textString=\"u_s\",textColor={0,0,255},extent={{-100,-10},{-80,-30}})}",
  "S231P:documentation": [
    "info=<html>\n<p>\nBasic block for Boolean sources of package Blocks.Sources.\nThis component has one continuous Boolean output signal y\nand a 3D icon (e.g., used in Blocks.Logical library).\n</p>\n</html>",
    "info=<html>\n<p>\nBasic block for Boolean sources of package Blocks.Sources.\nThis component has one continuous Boolean output signal y.\n</p>\n</html>",
    "info=<html>\n<p>\nBasic block for Integer sources of package Blocks.Sources.\nThis component has one continuous Integer output signal y\nand two parameters (offset, startTime) to shift the\ngenerated signal.\n</p>\n</html>",
    "info=<html>\n<p>\nBasic block for Real sources of package Blocks.Sources.\nThis component has one continuous Real output signal y\nand two parameters (offset, startTime) to shift the\ngenerated signal.\n</p>\n</html>",
    "info=<html>\n<p>\nBasic definitions of a discrete block of library\nBlocks.Discrete.\nThe output(s) will only change at events, but are not formally a discrete variable(s) in Modelica.\nThe input(s) will be sampled, and can thus be continuous variable(s).\n</p>\n\n<p>\n<strong>Important</strong>: If you connect several discrete blocks you should normally ensure that <strong>samplePeriod (and startTime)\nare exactly identical</strong> for all blocks, since otherwise the output from one block will be transformed into a continuous signal\nand sampled, which can cause a variable delay of up to one sample period leading to unexpected results.\n</p>\n\n<p>\nModelica 3.3 introduced synchronous operators that avoid the need to manually propagate samplePeriod to each block.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has a continuous Boolean input and a continuous Boolean output signal vector\nwhere the signal sizes of the input and output vector are identical.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has a continuous Integer input and a continuous Boolean output signal vector\nwhere the signal sizes of the input and output vector are identical.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has a continuous Integer input and a continuous Boolean output signal.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has a continuous Real input and a continuous Real output signal vector\nwhere the signal sizes of the input and output vector are identical.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has a continuous Real input and a continuous Real output signal vector.\nThe signal sizes of the input and output vector may be different.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has a input and a output signal vector\nwhere the signal sizes of the input and output vector are identical.\nThese signals are sampled due to the defined <strong>samplePeriod</strong> parameter.\nSee the base-class <a href=\\modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\>DiscreteBlock</a> for more information.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has a input and a output signal vector\nwhich are sampled due to the defined <strong>samplePeriod</strong> parameter.\nSee the base-class <a href=\\modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\>DiscreteBlock</a> for more information.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has a vector of continuous Real input signals and\none continuous Real output signal.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Boolean input and one continuous Boolean output signal\nwith a 3D icon (e.g., used in Blocks.Logical library).\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Boolean input and one continuous Boolean output signal.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Boolean input signal\nwith a 3D icon (e.g., used in Blocks.Logical library).\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Boolean output signal\nwith a 3D icon (e.g., used in Blocks.Logical library).\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Integer output signal vector.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Integer output signal.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Real input and one continuous Boolean output signal\nas well as a 3D icon (e.g., used in Blocks.Logical library).\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Real input and one continuous Real output signal.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Real output signal vector.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one continuous Real output signal.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has one input and one output signal\nwhich are sampled due to the defined <strong>samplePeriod</strong> parameter.\nSee the base-class <a href=\\modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\>DiscreteBlock</a> for more information.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has two Boolean input signals u1 and u2 and one Boolean output signal y.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has two Real input signal vectors and one\nReal output signal vector. The vector signals\nare sampled due to the defined <strong>samplePeriod</strong> parameter.\nThe block is designed\nto be used as base class for a corresponding controller.\nSee the base-class <a href=\\modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\>DiscreteBlock</a> for more information.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has two Real input signals and one\nReal output signal\nthat are sampled due to the defined <strong>samplePeriod</strong> parameter.\nThe block is designed\nto be used as base class for a corresponding controller.\nSee the base-class <a href=\\modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\>DiscreteBlock</a> for more information.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has two continuous Boolean input and one continuous Boolean output signal\nwith a 3D icon (e.g., used in Blocks.Logical library).\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has two continuous Real input and one continuous Boolean output signal\nas a result of the comparison of the two input signals. The block\nhas a 3D icon (e.g., used in Blocks.Logical library).\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has two continuous Real input signal vectors and one\ncontinuous Real output signal vector. The block is designed\nto be used as base class for a corresponding controller.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has two continuous Real input signals and one\ncontinuous Real output signal. The block is designed\nto be used as base class for a corresponding controller.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has two continuous Real input signals u1 and u2 and one\ncontinuous Real output signal y.\n</p>\n</html>",
    "info=<html>\n<p>\nBlock has two continuous Real input vectors u1 and u2 and one\ncontinuous Real output vector y.\nAll vectors have the same number of elements.\n</p>\n</html>",
    "info=<html>\n<p>\nPartial base class of noise generators defining the common features\nof noise blocks.\n</p>\n</html>,revisions=<html>\n<table border=\\1\\ cellspacing=\\0\\ cellpadding=\\2\\>\n<tr><th>Date</th> <th align=\\left\\>Description</th></tr>\n\n<tr><td> June 22, 2015 </td>\n    <td>\n\n<table border=\\0\\>\n<tr><td>\n         <img src=\\modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\ alt=\\DLR logo\\>\n</td><td valign=\\bottom\\>\n         Initial version implemented by\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\n         <a href=\\http://www.dlr.de/rmc/sr/en\\>DLR Institute of System Dynamics and Control</a>\n</td></tr></table>\n</td></tr>\n\n</table>\n</html>",
    "info=<html>\n<p>\nThis block defines the interface of a conversion block that\nconverts from one unit into another one.\n</p>\n\n</html>",
    "info=<html>\n<p>\nThis package contains interface definitions for\n<strong>continuous</strong> input/output blocks with Real,\nInteger and Boolean signals. Furthermore, it contains\npartial models for continuous and discrete blocks.\n</p>\n\n</html>,revisions=<html>\n<ul>\n<li><em>June 28, 2019</em>\n       by Thomas Beutlich:<br>\n       Removed obsolete blocks.</li>\n<li><em>Oct. 21, 2002</em>\n       by <a href=\\http://www.robotic.dlr.de/Martin.Otter/\\>Martin Otter</a>\n       and Christian Schweiger:<br>\n       Added several new interfaces.</li>\n<li><em>Oct. 24, 1999</em>\n       by <a href=\\http://www.robotic.dlr.de/Martin.Otter/\\>Martin Otter</a>:<br>\n       RealInputSignal renamed to RealInput. RealOutputSignal renamed to\n       output RealOutput. GraphBlock renamed to BlockIcon. SISOreal renamed to\n       SISO. SOreal renamed to SO. I2SOreal renamed to M2SO.\n       SignalGenerator renamed to SignalSource. Introduced the following\n       new models: MIMO, MIMOs, SVcontrol, MVcontrol, DiscreteBlockIcon,\n       DiscreteBlock, DiscreteSISO, DiscreteMIMO, DiscreteMIMOs,\n       BooleanBlockIcon, BooleanSISO, BooleanSignalSource, MI2BooleanMOs.</li>\n<li><em>June 30, 1999</em>\n       by <a href=\\http://www.robotic.dlr.de/Martin.Otter/\\>Martin Otter</a>:<br>\n       Realized a first version, based on an existing Dymola library\n       of Dieter Moormann and Hilding Elmqvist.</li>\n</ul>\n</html>",
    "info=<html>\n<p>\nThis package contains partial adaptors to implement adaptors in various domains\nbetween a physical connector and a signal representation of the connector signals.\nThis component is used to provide a pure signal interface around a physical model\nand export this model in form of an input/output block,\nespecially as FMU (<a href=\\https://fmi-standard.org\\>Functional Mock-up Unit</a>).\n</p>\n</html>",
    "info=<html>\n<p> Block has one continuous Real input signal and a\n    vector of continuous Real output signals.</p>\n\n</html>",
    "info=<html>\n<p>Block has two Boolean input vectors u1 and u2 and one Boolean output\nvector y. All vectors have the same number of elements.</p>\n</html>",
    "info=<html><p>\nBlock has three continuous Boolean input and one continuous Boolean output signal\nwith a 3D icon (e.g., used in Blocks.Logical library).\n</p>\n</html>"
  ],
  "S231P:extends": "Modelica.Icons.InterfacesPackage",
  "S231P:icon": [
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=false),graphics={Polygon(points={{-76,90},{-84,68},{-68,68},{-76,90}},lineColor={192,192,192},fillColor={192,192,192},fillPattern=FillPattern.Solid),Line(color={192,192,192},points={{-76,68},{-76,-80}}),Line(color={192,192,192},points={{-86,-14},{72,-14}}),Polygon(points={{94,-14},{72,-6},{72,-22},{94,-14}},lineColor={192,192,192},fillColor={192,192,192},fillPattern=FillPattern.Solid),Line(points={{-76,-19},{-62,-19},{-62,-3},{-54,-3},{-54,-51},{-46,-51},{-46,-29},{-38,-29},{-38,55},{-30,55},{-30,23},{-30,23},{-30,-37},{-20,-37},{-20,-19},{-10,-19},{-10,-47},{0,-47},{0,35},{6,35},{6,49},{12,49},{12,-7},{22,-7},{22,5},{28,5},{28,-25},{38,-25},{38,47},{48,47},{48,13},{56,13},{56,-53},{66,-53}},visible=enableNoise),Text(textString=\"%samplePeriod s\",extent={{-150,-110},{150,-150}}),Line(points={{-76,48},{72,48}},visible=not enableNoise),Text(textString=\"%y_off\",extent={{-75,42},{95,2}},visible=not enableNoise),Text(textString=\"%fixedLocalSeed\",textColor={238,46,47},extent={{-92,20},{98,-22}},visible=enableNoise and not useAutomaticLocalSeed)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=false,initialScale=0.06),graphics={Text(textString=DynamicSelect(\" \",String(y,extent={{110,-50},{250,-70}}),Text(textString=\"%name\",textColor={0,0,255},extent={{-150,150},{150,110}}),Rectangle(extent={{-100,100},{100,-100}},borderPattern=BorderPattern.Raised,fillColor={255,213,170},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Ellipse(extent={{-71,74},{-85,88}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid),Ellipse(extent={{-71,7},{-85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid),Ellipse(extent={{-71,-74},{-85,-88}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid),Ellipse(extent={{71,7},{85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Ellipse(extent={{-71,7},{-85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid),Ellipse(extent={{-71,-74},{-85,-88}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid),Ellipse(extent={{71,7},{85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Ellipse(extent={{-71,7},{-85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid),Ellipse(extent={{71,7},{85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Ellipse(extent={{-71,7},{-85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Ellipse(extent={{71,7},{85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Line(color={192,192,192},points={{-80,68},{-80,-80}}),Polygon(points={{-80,90},{-88,68},{-72,68},{-80,90}},lineColor={192,192,192},fillColor={192,192,192},fillPattern=FillPattern.Solid),Line(color={192,192,192},points={{-90,-70},{68,-70}}),Polygon(points={{90,-70},{68,-62},{68,-78},{90,-70}},lineColor={192,192,192},fillColor={192,192,192},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Polygon(points={{-80,88},{-88,66},{-72,66},{-80,88}},lineColor={255,0,255},fillColor={255,0,255},fillPattern=FillPattern.Solid),Line(color={255,0,255},points={{-80,66},{-80,-82}}),Line(color={255,0,255},points={{-90,-70},{72,-70}}),Polygon(points={{90,-70},{68,-62},{68,-78},{90,-70}},lineColor={255,0,255},fillColor={255,0,255},fillPattern=FillPattern.Solid),Ellipse(extent={{71,7},{85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Rectangle(extent={{-100,-100},{100,100}},lineColor={0,0,127},fillColor={255,255,255},fillPattern=FillPattern.Solid),Line(color={191,0,0},points={{-90,0},{30,0}}),Polygon(points={{90,0},{30,20},{30,-20},{90,0}},lineColor={191,0,0},fillColor={191,0,0},fillPattern=FillPattern.Solid),Text(textString=\"%name\",textColor={0,0,255},extent={{-150,110},{150,150}})}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Rectangle(extent={{-100,100},{100,-100}},borderPattern=BorderPattern.Raised,fillColor={210,210,210},fillPattern=FillPattern.Solid),Ellipse(extent={{73,7},{87,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid),Ellipse(extent={{32,10},{52,-10}},lineColor={0,0,127}),Line(color={0,0,127},points={{-100,-80},{42,-80},{42,0}}),Text(textString=\"%name\",textColor={0,0,255},extent={{-150,150},{150,110}})}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true),graphics={Rectangle(extent={{-100,100},{100,-100}},borderPattern=BorderPattern.Raised,fillColor={210,210,210},fillPattern=FillPattern.Solid),Text(textString=\"%threshold\",extent={{-150,-140},{150,-110}}),Ellipse(extent={{71,7},{85,-7}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid),Text(textString=\"%name\",textColor={0,0,255},extent={{-150,150},{150,110}})}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true,initialScale=0.04),graphics={Text(textString=\"%name\",textColor={0,0,255},extent={{-300,200},{300,120}}),Rectangle(extent={{-100,100},{100,-100}},borderPattern=BorderPattern.Raised,fillColor={215,215,215},fillPattern=FillPattern.Solid),Ellipse(extent={{60,10},{80,-10}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true,initialScale=0.06),graphics={Text(textString=\"%name\",textColor={0,0,255},extent={{-250,170},{250,110}}),Rectangle(extent={{-100,100},{100,-100}},borderPattern=BorderPattern.Raised,fillColor={215,215,215},fillPattern=FillPattern.Solid),Ellipse(extent={{60,10},{80,-10}},lineColor={235,235,235},fillColor={235,235,235},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true,initialScale=0.06),graphics={Text(textString=DynamicSelect(\" \",String(y,extent={{110,-50},{250,-70}}),Text(textString=\"%name\",textColor={0,0,255},extent={{-150,150},{150,110}}),Rectangle(extent={{-100,100},{100,-100}},borderPattern=BorderPattern.Raised,lineColor={255,137,0},fillColor={255,213,170},fillPattern=FillPattern.Solid)}",
    "coordinateSystem(extent={{-100,-100},{100,100}},preserveAspectRatio=true,initialScale=0.06),graphics={Text(textString=DynamicSelect(\" \",String(y,extent={{110,-50},{300,-70}}),Text(textString=\"%name\",textColor={0,0,255},extent={{-250,170},{250,110}}),Rectangle(extent={{-100,100},{100,-100}},borderPattern=BorderPattern.Raised,lineColor={255,137,0},fillColor={255,255,255},fillPattern=FillPattern.Solid)}"
  ],
  "S231P:label": [
    "Adaptors",
    "BooleanMIMOs",
    "BooleanSISO",
    "BooleanSignalSource",
    "DiscreteBlock",
    "DiscreteMIMO",
    "DiscreteMIMOs",
    "DiscreteSISO",
    "IntegerMIBooleanMOs",
    "IntegerMO",
    "IntegerSIBooleanSO",
    "IntegerSO",
    "IntegerSignalSource",
    "Interfaces",
    "MI2BooleanMOs",
    "MI2MO",
    "MIMO",
    "MIMOs",
    "MISO",
    "MO",
    "MVcontrol",
    "MVdiscrete",
    "PartialBooleanMISO",
    "PartialBooleanSISO_small",
    "PartialConversionBlock",
    "PartialIntegerMISO",
    "PartialIntegerSISO",
    "PartialNoise",
    "PartialRealMISO",
    "SI2BooleanSO",
    "SI2SO",
    "SIMO",
    "SISO",
    "SO",
    "SVcontrol",
    "SVdiscrete",
    "SignalSource",
    "partialBooleanComparison",
    "partialBooleanSI",
    "partialBooleanSI2SO",
    "partialBooleanSI3SO",
    "partialBooleanSISO",
    "partialBooleanSO",
    "partialBooleanSource",
    "partialBooleanThresholdComparison"
  ]
}